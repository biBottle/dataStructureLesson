class Solution {
public:
    Solution(){
        pw.push_back(1);
    }

    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> res;

        auto &wd = words;
        int wdLength = wd.size();
        int sLength = s.size();
        if(wdLength == 0 || sLength == 0){
            return res;
        }

        unordered_map<int64_t,int> count1;
        int wLength = wd[0].size();
        int64_t hw = 0;
        int i,j;
        for(i = 0;i < wdLength;++i){
            hw = 0;
            for(j = 0;j < wLength;++j){
                hw = hw * P + (wd[i][j] - 'a' + 1);
            }
            ++count1[hw];
        }

        vector<int64_t> hs(sLength + 2,0);
        for( i = 1; i <= sLength; ++i ){
            hs[i] = hs[i-1] * P + (s[i-1] - 'a' + 1);
        }

        unordered_map<int64_t,int> count2;
        int k;
        int64_t old_hw;
        for( k = 0; k < wLength; ++k){
            i = k;
            j = i + wLength;
            while(i < sLength && j <= sLength){
                hw = hash(hs,j - wLength + 1,j);
                if(count1.find(hw)==count1.end()){
                    i = j;
                    j = i + wLength;
                    count2.clear();
                    continue;
                }

                ++count2[hw];
                if(j - i == wdLength * wLength  && count2[hw] == count1[hw]){
                    res.push_back(i);
                }
                while(j - i == wdLength * wLength || count2[hw] > count1[hw]){
                    old_hw =  hash(hs,i+1,i+wLength);
                    --count2[old_hw];
                    i += wLength;
                }
                j += wLength;
            }
            count2.clear();
        }
        sort(res.begin(),res.end());
        hs.clear();
        count1.clear();
        count2.clear();
        return res;       
    }
    ~Solution(){
        pw.clear();
    }
    private:
    static const int64_t P = 10;
    vector<int64_t> pw;

    int64_t getPow(int i){
        while(pw.size() <= i){
            pw.push_back(pw.back() * P);
        }
        return pw[i];
    }

    int64_t hash(vector<int64_t> &h, int left,int right){
        return h[right] - h[left-1] * getPow(right - left + 1);
    }
};
